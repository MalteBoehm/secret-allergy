{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/navigators/createStackNavigator.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from \"../views/Stack/StackView\";\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  var defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'\n  };\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: typeof screenOptions === 'function' ? function () {\n      return _objectSpread(_objectSpread({}, defaultOptions), screenOptions.apply(void 0, arguments));\n    } : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    return navigation.addListener == null ? void 0 : navigation.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/navigators/createStackNavigator.tsx"],"names":["React","useNavigationBuilder","createNavigatorFactory","StackRouter","StackActions","StackView","StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SACEC,oBADF,EAEEC,sBAFF,EAKEC,WALF,EAQEC,YARF,QAWO,0BAXP;AAYA,OAAOC,SAAP;;AAWA,SAASC,cAAT,OAKU;AAAA,MAJRC,gBAIQ,QAJRA,gBAIQ;AAAA,MAHRC,QAGQ,QAHRA,QAGQ;AAAA,MAFRC,aAEQ,QAFRA,aAEQ;AAAA,MADLC,IACK;;AACR,MAAMC,cAAc,GAAG;AACrBC,IAAAA,cAAc,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KADX;AAErBC,IAAAA,gBAAgB,EACdF,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IACAD,QAAQ,CAACC,EAAT,KAAgB,SADhB,IAEAD,QAAQ,CAACC,EAAT,KAAgB;AALG,GAAvB;;AADQ,8BASmCb,oBAAoB,CAM7DE,WAN6D,EAMhD;AACbI,IAAAA,gBAAgB,EAAhBA,gBADa;AAEbC,IAAAA,QAAQ,EAARA,QAFa;AAGbC,IAAAA,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI;AAAA,6CACKE,cADL,GAEKF,aAAa,MAAb,mBAFL;AAAA,KADJ,mCAMSE,cANT,GAOSF,aAPT;AAJW,GANgD,CATvD;AAAA,MASAO,KATA,yBASAA,KATA;AAAA,MASOC,WATP,yBASOA,WATP;AAAA,MASoBC,UATpB,yBASoBA,UATpB;;AA8BRlB,EAAAA,KAAK,CAACmB,SAAN,CACE;AAAA,WACED,UAAU,CAACE,WADb,oBACEF,UAAU,CAACE,WAAX,CAAyB,UAAzB,EAAqC,UAACC,CAAD,EAAO;AAC1C,UAAMC,SAAS,GAAGJ,UAAU,CAACI,SAAX,EAAlB;AAIAC,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEP,KAAK,CAACQ,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AAGAP,UAAAA,UAAU,CAACQ,QAAX,iCACKtB,YAAY,CAACuB,QAAb,EADL;AAEEC,YAAAA,MAAM,EAAEZ,KAAK,CAACa;AAFhB;AAID;AACF,OAboB,CAArB;AAcD,KAnBD,CADF;AAAA,GADF,EAsBE,CAACX,UAAD,EAAaF,KAAK,CAACQ,KAAnB,EAA0BR,KAAK,CAACa,GAAhC,CAtBF;AAyBA,SACE,oBAAC,SAAD,eACMnB,IADN;AAEE,IAAA,KAAK,EAAEM,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEC,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD;;AAED,eAAehB,sBAAsB,CAKnCI,cALmC,CAArC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}