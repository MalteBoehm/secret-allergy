{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nvar BaseRouter = {\n  getStateForAction: function getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          var index = action.source ? state.routes.findIndex(function (r) {\n            return r.key === action.source;\n          }) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map(function (r, i) {\n              return i === index ? _objectSpread(_objectSpread({}, r), {}, {\n                params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n              }) : r;\n            })\n          });\n        }\n\n      case 'RESET':\n        {\n          var nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {\n            return !state.routeNames.includes(route.name);\n          })) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {\n              return !state.routeNames.includes(name);\n            })) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(function (route) {\n                return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                  key: route.name + \"-\" + nanoid()\n                });\n              })\n            });\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/routers/src/BaseRouter.tsx"],"names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAWA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,iBADiB,6BAEfC,KAFe,EAGfC,MAHe,EAIqB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,YAAL;AAAmB;AACjB,cAAMC,KAAK,GAAGF,MAAM,CAACG,MAAP,GACVJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAuB,UAACC,CAAD;AAAA,mBAAOA,CAAC,CAACC,GAAF,KAAUP,MAAM,CAACG,MAAxB;AAAA,WAAvB,CADU,GAEVJ,KAAK,CAACG,KAFV;;AAIA,cAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,iDACKH,KADL;AAEEK,YAAAA,MAAM,EAAEL,KAAK,CAACK,MAAN,CAAaI,GAAb,CAAiB,UAACF,CAAD,EAAIG,CAAJ;AAAA,qBACvBA,CAAC,KAAKP,KAAN,mCACSI,CADT;AACYI,gBAAAA,MAAM,kCAAOJ,CAAC,CAACI,MAAT,GAAoBV,MAAM,CAACW,OAAP,CAAeD,MAAnC;AADlB,mBAEIJ,CAHmB;AAAA,aAAjB;AAFV;AAQD;;AAED,WAAK,OAAL;AAAc;AACZ,cAAMM,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;AAEA,cACEC,SAAS,CAACR,MAAV,CAAiBS,MAAjB,KAA4B,CAA5B,IACAD,SAAS,CAACR,MAAV,CAAiBU,IAAjB,CACE,UAACC,KAAD;AAAA,mBAA6B,CAAChB,KAAK,CAACiB,UAAN,CAAiBC,QAAjB,CAA0BF,KAAK,CAACG,IAAhC,CAA9B;AAAA,WADF,CAFF,EAKE;AACA,mBAAO,IAAP;AACD;;AAED,cAAIN,SAAS,CAACO,KAAV,KAAoB,KAAxB,EAA+B;AAC7B,gBACEpB,KAAK,CAACiB,UAAN,CAAiBH,MAAjB,KAA4BD,SAAS,CAACI,UAAV,CAAqBH,MAAjD,IACAD,SAAS,CAACI,UAAV,CAAqBF,IAArB,CACE,UAACI,IAAD;AAAA,qBAAU,CAACnB,KAAK,CAACiB,UAAN,CAAiBC,QAAjB,CAA0BC,IAA1B,CAAX;AAAA,aADF,CAFF,EAKE;AACA,qBAAO,IAAP;AACD;;AAED,mDACKN,SADL;AAEER,cAAAA,MAAM,EAAEQ,SAAS,CAACR,MAAV,CAAiBI,GAAjB,CAAqB,UAACO,KAAD;AAAA,uBAC3BA,KAAK,CAACR,GAAN,GAAYQ,KAAZ,mCAAyBA,KAAzB;AAAgCR,kBAAAA,GAAG,EAAKQ,KAAK,CAACG,IAAX,SAAmBtB,MAAM;AAA5D,kBAD2B;AAAA,eAArB;AAFV;AAMD;;AAED,iBAAOgB,SAAP;AACD;;AAED;AACE,eAAO,IAAP;AAtDJ;AAwDD,GA7DgB;AA+DjBQ,EAAAA,uBA/DiB,mCA+DOpB,MA/DP,EA+DuC;AACtD,WAAOA,MAAM,CAACC,IAAP,KAAgB,UAAvB;AACD;AAjEgB,CAAnB;AAoEA,eAAeJ,UAAf","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}