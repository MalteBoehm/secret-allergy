{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StackActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen as ScreenComponent, ScreenStack } from 'react-native-screens';\nimport HeaderConfig from \"./HeaderConfig\";\nvar Screen = ScreenComponent;\nvar isAndroid = Platform.OS === 'android';\nexport default function NativeStackView(_ref) {\n  var _this = this;\n\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var key = state.key,\n      routes = state.routes;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(ScreenStack, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, routes.map(function (route) {\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        renderScene = _descriptors$route$ke.render;\n    var gestureEnabled = options.gestureEnabled,\n        _options$replaceAnima = options.replaceAnimation,\n        replaceAnimation = _options$replaceAnima === void 0 ? 'pop' : _options$replaceAnima,\n        _options$stackPresent = options.stackPresentation,\n        stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent,\n        stackAnimation = options.stackAnimation,\n        contentStyle = options.contentStyle;\n    var viewStyles = [styles.container, stackPresentation !== 'transparentModal' && {\n      backgroundColor: colors.background\n    }, contentStyle];\n    return React.createElement(Screen, {\n      key: route.key,\n      style: StyleSheet.absoluteFill,\n      gestureEnabled: isAndroid ? false : gestureEnabled,\n      replaceAnimation: replaceAnimation,\n      stackPresentation: stackPresentation,\n      stackAnimation: stackAnimation,\n      onWillAppear: function onWillAppear() {\n        navigation.emit({\n          type: 'transitionStart',\n          data: {\n            closing: false\n          },\n          target: route.key\n        });\n      },\n      onWillDisappear: function onWillDisappear() {\n        navigation.emit({\n          type: 'transitionStart',\n          data: {\n            closing: true\n          },\n          target: route.key\n        });\n      },\n      onAppear: function onAppear() {\n        navigation.emit({\n          type: 'appear',\n          target: route.key\n        });\n        navigation.emit({\n          type: 'transitionEnd',\n          data: {\n            closing: false\n          },\n          target: route.key\n        });\n      },\n      onDisappear: function onDisappear() {\n        navigation.emit({\n          type: 'transitionEnd',\n          data: {\n            closing: true\n          },\n          target: route.key\n        });\n      },\n      onDismissed: function onDismissed() {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key\n        });\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: key\n        }));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, React.createElement(HeaderConfig, _extends({}, options, {\n      route: route,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    })), React.createElement(View, {\n      style: viewStyles,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, renderScene()));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx"],"names":["StackActions","useTheme","React","Screen","ScreenComponent","ScreenStack","HeaderConfig","isAndroid","Platform","OS","NativeStackView","state","navigation","descriptors","key","routes","colors","styles","container","map","route","options","renderScene","render","gestureEnabled","replaceAnimation","stackPresentation","stackAnimation","contentStyle","viewStyles","backgroundColor","background","StyleSheet","absoluteFill","emit","type","data","closing","target","dispatch","pop","source","create","flex"],"mappings":"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","sourcesContent":["import {\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen as ScreenComponent,\n  ScreenProps,\n  ScreenStack,\n} from 'react-native-screens';\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\nconst isAndroid = Platform.OS === 'android';\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          replaceAnimation = 'pop',\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        const viewStyles = [\n          styles.container,\n          stackPresentation !== 'transparentModal' && {\n            backgroundColor: colors.background,\n          },\n          contentStyle,\n        ];\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={isAndroid ? false : gestureEnabled}\n            replaceAnimation={replaceAnimation}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: key,\n              });\n            }}>\n            <HeaderConfig {...options} route={route} />\n            <View style={viewStyles}>{renderScene()}</View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}