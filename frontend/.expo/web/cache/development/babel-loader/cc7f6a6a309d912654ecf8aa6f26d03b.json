{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor == null ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  _createClass(CardStack, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref3 = (descriptor == null ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref3.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute == null ? void 0 : nextRoute.key] || state.descriptors[nextRoute == null ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute == null ? void 0 : previousRoute.key] || state.descriptors[previousRoute == null ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    };\n\n    _this.handleHeaderLayout = function (_ref4) {\n      var route = _ref4.route,\n          height = _ref4.height;\n\n      _this.setState(function (_ref5) {\n        var headerHeights = _ref5.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty({}, route.key, height))\n        };\n      });\n    };\n\n    _this.getFocusedRoute = function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    };\n\n    _this.getPreviousScene = function (_ref6) {\n      var route = _ref6.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    };\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref7 = focusedOptions.safeAreaInsets || {},\n          _ref7$top = _ref7.top,\n          top = _ref7$top === void 0 ? insets.top : _ref7$top,\n          _ref7$right = _ref7.right,\n          right = _ref7$right === void 0 ? insets.right : _ref7$right,\n          _ref7$bottom = _ref7.bottom,\n          bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,\n          _ref7$left = _ref7.left,\n          left = _ref7$left === void 0 ? insets.left : _ref7$left;\n\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n            detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 9\n        }\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      return React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 7\n        }\n      }, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 9\n        }\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (shouldUseActivityState) {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n\n        var _ref8 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref8.safeAreaInsets,\n            _ref8$headerShown = _ref8.headerShown,\n            headerShown = _ref8$headerShown === void 0 ? true : _ref8$headerShown,\n            headerTransparent = _ref8.headerTransparent,\n            cardShadowEnabled = _ref8.cardShadowEnabled,\n            cardOverlayEnabled = _ref8.cardOverlayEnabled,\n            cardOverlay = _ref8.cardOverlay,\n            cardStyle = _ref8.cardStyle,\n            animationEnabled = _ref8.animationEnabled,\n            gestureResponseDistance = _ref8.gestureResponseDistance,\n            gestureVelocityImpact = _ref8.gestureVelocityImpact,\n            _ref8$gestureDirectio = _ref8.gestureDirection,\n            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n            _ref8$transitionSpec = _ref8.transitionSpec,\n            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref9.animationEnabled,\n                _ref9$gestureDirectio = _ref9.gestureDirection,\n                _gestureDirection = _ref9$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref9$gestureDirectio,\n                _ref9$transitionSpec = _ref9.transitionSpec,\n                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,\n                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,\n                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;\n\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref10 = safeAreaInsets || {},\n            _ref10$top = _ref10.top,\n            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,\n            _ref10$right = _ref10.right,\n            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,\n            _ref10$bottom = _ref10.bottom,\n            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,\n            _ref10$left = _ref10.left,\n            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;\n\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 15\n          }\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 17\n          }\n        })));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx"],"names":["React","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","handleLayout","e","nativeEvent","setState","handleHeaderLayout","previousHeight","getFocusedRoute","getPreviousScene","getPreviousRoute","previousScene","find","Dimensions","get","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","onContentHeightChange","styleInterpolator","styles","floating","absolute","container","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","Component","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState) {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}