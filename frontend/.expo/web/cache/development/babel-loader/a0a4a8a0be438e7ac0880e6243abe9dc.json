{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { NavigationHelpersContext, StackActions } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  var _super = _createSuper(StackView);\n\n  function StackView() {\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    };\n\n    _this.getGesturesEnabled = function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n\n      if (descriptor) {\n        var _descriptor$options = descriptor.options,\n            gestureEnabled = _descriptor$options.gestureEnabled,\n            animationEnabled = _descriptor$options.animationEnabled;\n\n        if (animationEnabled === false) {\n          return false;\n        }\n\n        return gestureEnabled !== false;\n      }\n\n      return false;\n    };\n\n    _this.getPreviousRoute = function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    };\n\n    _this.renderScene = function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    };\n\n    _this.renderHeader = function (props) {\n      return React.createElement(HeaderContainer, _extends({}, props, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    _this.handleOpenRoute = function (_ref4) {\n      var route = _ref4.route;\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n          closingRouteKeys = _this$state2.closingRouteKeys,\n          replacingRouteKeys = _this$state2.replacingRouteKeys;\n\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    };\n\n    _this.handleCloseRoute = function (_ref5) {\n      var route = _ref5.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    };\n\n    _this.handleTransitionStart = function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n\n    _this.handleTransitionEnd = function (_ref7, closing) {\n      var route = _ref7.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n\n    _this.handleGestureStart = function (_ref8) {\n      var route = _ref8.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    };\n\n    _this.handleGestureEnd = function (_ref9) {\n      var route = _ref9.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    };\n\n    _this.handleGestureCancel = function (_ref10) {\n      var route = _ref10.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          navigation = _this$props3.navigation,\n          keyboardHandlingEnabled = _this$props3.keyboardHandlingEnabled,\n          _this$props3$mode = _this$props3.mode,\n          mode = _this$props3$mode === void 0 ? 'card' : _this$props3$mode,\n          _this$props3$headerMo = _this$props3.headerMode,\n          headerMode = _this$props3$headerMo === void 0 ? mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen' : _this$props3$headerMo,\n          _ = _this$props3.descriptors,\n          rest = _objectWithoutProperties(_this$props3, [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"]);\n\n      var _this$state3 = this.state,\n          routes = _this$state3.routes,\n          descriptors = _this$state3.descriptors,\n          openingRouteKeys = _this$state3.openingRouteKeys,\n          closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(NavigationHelpersContext.Provider, {\n        value: navigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 7\n        }\n      }, React.createElement(GestureHandlerWrapper, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 9\n        }\n      }, React.createElement(SafeAreaProviderCompat, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }\n      }, React.createElement(SafeAreaConsumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }\n      }, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 17\n          }\n        }, function (props) {\n          return React.createElement(HeaderShownContext.Consumer, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 21\n            }\n          }, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              mode: mode,\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              getPreviousRoute: _this2.getPreviousRoute,\n              getGesturesEnabled: _this2.getGesturesEnabled,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              headerMode: headerMode,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest, props, {\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 25\n              }\n            }));\n          });\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) != null ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n\n        routes = routes.slice();\n\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref11) {\n          var key = _ref11.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx"],"names":["React","SafeAreaConsumer","NavigationHelpersContext","StackActions","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","HeaderShownContext","GestureHandlerWrapper","View","isArrayEqual","a","b","length","every","it","index","StackView","state","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","getGesturesEnabled","route","descriptor","key","options","gestureEnabled","animationEnabled","getPreviousRoute","filter","r","includes","findIndex","renderScene","props","render","renderHeader","handleOpenRoute","navigation","some","routeNames","name","navigate","setState","handleCloseRoute","dispatch","pop","source","target","handleTransitionStart","closing","emit","type","data","handleTransitionEnd","handleGestureStart","handleGestureEnd","handleGestureCancel","keyboardHandlingEnabled","mode","headerMode","Platform","OS","_","rest","styles","container","insets","isParentHeaderShown","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","Component","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  StackActions,\n  StackNavigationState,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== false;\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}