{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/src/context/AuthContextProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport AuthContext from \"./AuthContext\";\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { loadTokenFromLocalStorage, saveTokenToLocalStorage, loadUserDataFromLocalStorage, saveUserDataToLocalStorage, deleteTokenFromLocalStorage } from \"../service/AsyncStorage\";\nexport default function (_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(tokenFromStorage),\n      _useState2 = _slicedToArray(_useState, 2),\n      token = _useState2[0],\n      setToken = _useState2[1];\n\n  console.log(token + \" Das Token\");\n\n  var tokenFromStorage = function tokenFromStorage() {\n    var value;\n    return _regeneratorRuntime.async(function tokenFromStorage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('ACCESS_TOKEN'));\n\n          case 2:\n            value = _context.sent;\n\n            if (!value) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", value);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState3 = useState(loadUserDataFromLocalStorage()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userData = _useState4[0],\n      setUserData = _useState4[1];\n\n  console.log(userData + \" UserData\");\n  useEffect(function () {\n    if (token) {\n      try {\n        var decoded = jwtDecode(token);\n        console.log(decoded.toString() + \" value of decoded token\");\n        console.log(decoded.user);\n\n        if (decoded.exp > new Date().getTime() / 1000) {\n          setUserData(decoded);\n          saveTokenToLocalStorage(token);\n          saveUserDataToLocalStorage(decoded);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [token]);\n\n  var tokenIsValid = function tokenIsValid() {\n    return token && (userData == null ? void 0 : userData.exp) > new Date().getTime() / 1000;\n  };\n\n  var loginWithUserCredentials = function loginWithUserCredentials(loginData) {\n    return axios.post('http://192.168.178.76:8080/auth/login', loginData).then(function (response) {\n      setToken(response.data);\n    });\n  };\n\n  var logout = function logout() {\n    return deleteTokenFromLocalStorage();\n  };\n\n  console.log(tokenIsValid() + \" \" + token);\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      token: token,\n      setToken: setToken,\n      logout: logout,\n      tokenIsValid: tokenIsValid,\n      loginWithUserCredentials: loginWithUserCredentials,\n      userData: userData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/src/context/AuthContextProvider.js"],"names":["React","useEffect","useState","AuthContext","axios","jwtDecode","AsyncStorage","loadTokenFromLocalStorage","saveTokenToLocalStorage","loadUserDataFromLocalStorage","saveUserDataToLocalStorage","deleteTokenFromLocalStorage","children","tokenFromStorage","token","setToken","console","log","getItem","value","userData","setUserData","decoded","toString","user","exp","Date","getTime","e","tokenIsValid","loginWithUserCredentials","loginData","post","then","response","data","logout"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport AuthContext from './AuthContext';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {\n    loadTokenFromLocalStorage ,\n    saveTokenToLocalStorage,\n    loadUserDataFromLocalStorage,\n    saveUserDataToLocalStorage,\n    deleteTokenFromLocalStorage\n    } from '../service/AsyncStorage';\n\n\nexport default function ( {children} ) {\n    const [token, setToken] = useState(tokenFromStorage)\n    console.log(token + \" Das Token\")\n    const tokenFromStorage= async ()=>{\n            const value = await AsyncStorage.getItem('ACCESS_TOKEN')\n            if(value){\n                return value;\n            }\n    }\n\n\n\n\n\n    const [userData, setUserData] = useState(loadUserDataFromLocalStorage());\n    console.log(userData + \" UserData\")\n\n\n    useEffect(() => {\n        if (token) {\n            try {\n                const decoded = jwtDecode(token);\n                console.log(decoded.toString() + \" value of decoded token\")\n                console.log(decoded.user)\n                if (decoded.exp > new Date().getTime() / 1000) {\n                    setUserData(decoded);\n                    saveTokenToLocalStorage(token);\n                    saveUserDataToLocalStorage(decoded);\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    }, [token]);\n\n    const tokenIsValid = () =>\n        token && userData?.exp > new Date().getTime() / 1000;\n\n    const loginWithUserCredentials = (loginData) =>\n        axios\n            .post('http://192.168.178.76:8080/auth/login', loginData)\n            .then((response) => {\n                setToken(response.data)\n            });\n\n    const logout = () =>\n        deleteTokenFromLocalStorage();\n\n    console.log(tokenIsValid() + \" \" + token)\n    return (\n        <AuthContext.Provider\n            value={{\n                token,\n                setToken,\n                logout,\n                tokenIsValid,\n                loginWithUserCredentials,\n                userData,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}