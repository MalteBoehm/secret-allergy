{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Color from 'color';\nimport CardSheet from \"./CardSheet\";\nimport { PanGestureHandler, GestureState } from \"../GestureHandler\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\n\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isCurrentlyMounted = false;\n    _this.isClosing = new Animated.Value(FALSE);\n    _this.inverted = new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection));\n    _this.layout = {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    };\n    _this.isSwiping = new Animated.Value(FALSE);\n\n    _this.animate = function (_ref) {\n      var closing = _ref.closing,\n          velocity = _ref.velocity;\n      var _this$props = _this.props,\n          gesture = _this$props.gesture,\n          transitionSpec = _this$props.transitionSpec,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onTransition = _this$props.onTransition;\n\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n\n      _this.lastToValue = toValue;\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n      _this.setPointerEventsEnabled(!closing);\n\n      _this.handleStartInteraction();\n\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition == null ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.handleEndInteraction();\n\n        clearTimeout(_this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    };\n\n    _this.getAnimateToValue = function (_ref3) {\n      var closing = _ref3.closing,\n          layout = _ref3.layout,\n          gestureDirection = _ref3.gestureDirection;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    };\n\n    _this.setPointerEventsEnabled = function (enabled) {\n      var _this$contentRef$curr;\n\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = _this.contentRef.current) == null ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents: pointerEvents\n      });\n    };\n\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n\n    _this.handleGestureStateChange = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props2 = _this.props,\n          layout = _this$props2.layout,\n          onClose = _this$props2.onClose,\n          onGestureBegin = _this$props2.onGestureBegin,\n          onGestureCanceled = _this$props2.onGestureCanceled,\n          onGestureEnd = _this$props2.onGestureEnd,\n          gestureDirection = _this$props2.gestureDirection,\n          gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          _this.isSwiping.setValue(TRUE);\n\n          _this.handleStartInteraction();\n\n          onGestureBegin == null ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            _this.handleEndInteraction();\n\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n\n            onGestureCanceled == null ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n\n            var distance;\n            var translation;\n\n            var _velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n\n                _this.forceUpdate();\n              }, 32);\n            }\n\n            onGestureEnd == null ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    };\n\n    _this.getInterpolatedStyle = memoize(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return styleInterpolator({\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      });\n    });\n    _this.getCardAnimationContext = memoize(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: index,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    });\n    _this.contentRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          layout = _this$props3.layout,\n          gestureDirection = _this$props3.gestureDirection,\n          closing = _this$props3.closing;\n      var width = layout.width,\n          height = layout.height;\n\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n\n      var toValue = this.getAnimateToValue(this.props);\n\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          gestureDirection = _this$props4.gestureDirection,\n          gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance == null ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance == null ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          }\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          }\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            }\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            }\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          styleInterpolator = _this$props5.styleInterpolator,\n          index = _this$props5.index,\n          current = _this$props5.current,\n          gesture = _this$props5.gesture,\n          next = _this$props5.next,\n          layout = _this$props5.layout,\n          insets = _this$props5.insets,\n          overlay = _this$props5.overlay,\n          overlayEnabled = _this$props5.overlayEnabled,\n          shadowEnabled = _this$props5.shadowEnabled,\n          gestureEnabled = _this$props5.gestureEnabled,\n          gestureDirection = _this$props5.gestureDirection,\n          pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n          children = _this$props5.children,\n          customContainerStyle = _this$props5.containerStyle,\n          contentStyle = _this$props5.contentStyle,\n          rest = _objectWithoutProperties(_this$props5, [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\"]);\n\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var containerStyle = interpolatedStyle.containerStyle,\n          cardStyle = interpolatedStyle.cardStyle,\n          overlayStyle = interpolatedStyle.overlayStyle,\n          shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n          backgroundColor = _StyleSheet$flatten.backgroundColor;\n\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: animationContext,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 9\n        }\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 9\n        }\n      }), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.container, cardStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 15\n        }\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 19\n        }\n      }) : null, React.createElement(CardSheet, {\n        ref: this.contentRef,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 17\n        }\n      }, children))))));\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nCard.defaultProps = {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref5) {\n    var style = _ref5.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style],\n      __self: Card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }) : null;\n  }\n};\nexport { Card as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx"],"names":["React","Color","CardSheet","PanGestureHandler","GestureState","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","hasOpacityStyle","style","flattenedStyle","StyleSheet","flatten","opacity","Card","isCurrentlyMounted","isClosing","Animated","Value","inverted","props","gestureDirection","layout","width","height","isSwiping","animate","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","handleEndInteraction","forceUpdate","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","InteractionManager","createInteractionHandle","clearInteractionHandle","handleGestureStateChange","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","BEGAN","setValue","CANCELLED","velocityY","velocityX","END","distance","translation","translationY","translationX","setTimeout","getInterpolatedStyle","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","swiping","layouts","screen","insets","top","right","bottom","left","getCardAnimationContext","createRef","prevProps","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","customContainerStyle","containerStyle","contentStyle","rest","interpolatedStyle","animationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","absoluteFill","styles","container","gestureActivationCriteria","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","Component","defaultProps","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}