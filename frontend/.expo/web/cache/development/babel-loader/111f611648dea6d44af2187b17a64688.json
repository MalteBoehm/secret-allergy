{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + nanoid(),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || route.name + \"-\" + nanoid(),\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + nanoid(),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            var _action$payload = action.payload,\n                name = _action$payload.name,\n                key = _action$payload.key,\n                params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : name + \"-\" + nanoid(),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var route = action.payload.name && action.payload.key ? state.routes.find(function (route) {\n              return route.name === action.payload.name && route.key === action.payload.key;\n            }) : undefined;\n            var routes;\n\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push(action.payload.params ? _objectSpread(_objectSpread({}, route), {}, {\n                params: action.payload.params !== undefined ? _objectSpread(_objectSpread({}, route.params), action.payload.params) : route.params\n              }) : route);\n            } else {\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: action.payload.key === undefined ? action.payload.name + \"-\" + nanoid() : action.payload.key,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (_index > 0) {\n              var _count = Math.max(_index - action.payload.count + 1, 1);\n\n              var _routes = state.routes.slice(0, _count).concat(state.routes.slice(_index + 1));\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.key || action.payload.name && state.routeNames.includes(action.payload.name)) {\n            var _index2 = -1;\n\n            if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(state, {\n                type: 'PUSH',\n                payload: {\n                  key: action.payload.key,\n                  name: action.payload.name,\n                  params: action.payload.params\n                }\n              }, options);\n            }\n\n            var _route = state.routes[_index2];\n\n            var _params;\n\n            if (action.payload.merge === false) {\n              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]), action.payload.params) : action.payload.params;\n            } else {\n              _params = action.payload.params ? _objectSpread(_objectSpread({}, _route.params), action.payload.params) : _route.params;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [_params !== _route.params ? _objectSpread(_objectSpread({}, _route), {}, {\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n\n  return router;\n}","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/routers/src/StackRouter.tsx"],"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","find","max","concat","merge","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<\n  ParamList extends ParamListBase\n> = NavigationState<ParamList> & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const route =\n              action.payload.name && action.payload.key\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      route.key === action.payload.key\n                  )\n                : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push(\n                action.payload.params\n                  ? {\n                      ...route,\n                      params:\n                        action.payload.params !== undefined\n                          ? {\n                              ...route.params,\n                              ...action.payload.params,\n                            }\n                          : route.params,\n                    }\n                  : route\n              );\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key === undefined\n                      ? `${action.payload.name}-${nanoid()}`\n                      : action.payload.key,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.key ||\n            (action.payload.name &&\n              state.routeNames.includes(action.payload.name))\n          ) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(\n                state,\n                {\n                  type: 'PUSH',\n                  payload: {\n                    key: action.payload.key,\n                    name: action.payload.name,\n                    params: action.payload.params,\n                  },\n                },\n                options\n              );\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge === false) {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            } else {\n              params = action.payload.params\n                ? {\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params\n                  ? { ...route, params }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}