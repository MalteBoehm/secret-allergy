{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Screens.tsx\",\n    _Screens,\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nvar WebScreen = function (_React$Component) {\n  _inherits(WebScreen, _React$Component);\n\n  var _super = _createSuper(WebScreen);\n\n  function WebScreen() {\n    _classCallCheck(this, WebScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WebScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"active\", \"style\"]);\n\n      return React.createElement(View, _extends({\n        hidden: !active,\n        style: [style, {\n          display: active ? 'flex' : 'none'\n        }]\n      }, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return WebScreen;\n}(React.Component);\n\nvar AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\nexport var shouldUseActivityState = (_Screens = Screens) == null ? void 0 : _Screens.shouldUseActivityState;\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var _Screens2;\n\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, [\"enabled\"]);\n\n  if (enabled && Platform.OS !== 'web' && ((_Screens2 = Screens) == null ? void 0 : _Screens2.screensEnabled())) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return React.createElement(View, _extends({}, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  }));\n};\nexport var MaybeScreen = function MaybeScreen(_ref2) {\n  var _Screens3;\n\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, [\"enabled\", \"active\"]);\n\n  if (enabled && Platform.OS === 'web') {\n    return React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  if (enabled && ((_Screens3 = Screens) == null ? void 0 : _Screens3.screensEnabled())) {\n    if (shouldUseActivityState) {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        activityState: active\n      }, rest, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      return React.createElement(Screens.Screen, _extends({\n        enabled: enabled,\n        active: active\n      }, rest, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  return React.createElement(View, _extends({}, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/malte/Desktop/secretAllergy/secret-allergy/frontend/node_modules/@react-navigation/stack/src/views/Screens.tsx"],"names":["React","Screens","require","e","WebScreen","props","active","style","rest","display","Component","AnimatedWebScreen","Animated","createAnimatedComponent","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","OS","screensEnabled","MaybeScreen"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAGA,IAAIC,OAAJ;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CAEX;;IAKKC,S;;;;;;;;;;;;;6BAMK;AAAA,wBAC4B,KAAKC,KADjC;AAAA,UACCC,MADD,eACCA,MADD;AAAA,UACSC,KADT,eACSA,KADT;AAAA,UACmBC,IADnB;;AAGP,aACE,oBAAC,IAAD;AAEE,QAAA,MAAM,EAAE,CAACF,MAFX;AAGE,QAAA,KAAK,EAAE,CAACC,KAAD,EAAQ;AAAEE,UAAAA,OAAO,EAAEH,MAAM,GAAG,MAAH,GAAY;AAA7B,SAAR;AAHT,SAIME,IAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EAjBqBR,KAAK,CAACU,S;;AAoB9B,IAAMC,iBAAiB,GAAGC,QAAQ,CAACC,uBAAT,CAAiCT,SAAjC,CAA1B;AAGA,OAAO,IAAMU,sBAAsB,eAAGb,OAAH,qBAAG,SAASa,sBAAxC;AAEP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAM9B;AAAA;;AAAA,MALJC,OAKI,QALJA,OAKI;AAAA,MAJDR,IAIC;;AACJ,MAAIQ,OAAO,IAAIC,QAAQ,CAACC,EAAT,KAAgB,KAA3B,kBAAoCjB,OAApC,qBAAoC,UAASkB,cAAT,EAApC,CAAJ,EAAmE;AACjE,WAEE,oBAAC,OAAD,CAAS,eAAT;AAAyB,MAAA,OAAO,EAAEH;AAAlC,OAA+CR,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF;AAID;;AAED,SAAO,oBAAC,IAAD,eAAUA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAfM;AAiBP,OAAO,IAAMY,WAAW,GAAG,SAAdA,WAAc,QAQrB;AAAA;;AAAA,MAPJJ,OAOI,SAPJA,OAOI;AAAA,MANJV,MAMI,SANJA,MAMI;AAAA,MALDE,IAKC;;AACJ,MAAIQ,OAAO,IAAIC,QAAQ,CAACC,EAAT,KAAgB,KAA/B,EAAsC;AACpC,WAAO,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEZ;AAA3B,OAAuCE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAED,MAAIQ,OAAO,kBAAIf,OAAJ,qBAAI,UAASkB,cAAT,EAAJ,CAAX,EAA0C;AACxC,QAAIL,sBAAJ,EAA4B;AAC1B,aAEE,oBAAC,OAAD,CAAS,MAAT;AAAgB,QAAA,OAAO,EAAEE,OAAzB;AAAkC,QAAA,aAAa,EAAEV;AAAjD,SAA6DE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF;AAID,KALD,MAKO;AACL,aAEE,oBAAC,OAAD,CAAS,MAAT;AAAgB,QAAA,OAAO,EAAEQ,OAAzB;AAAkC,QAAA,MAAM,EAAEV;AAA1C,SAAsDE,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF;AAID;AACF;;AAED,SAAO,oBAAC,IAAD,eAAUA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA5BM","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}